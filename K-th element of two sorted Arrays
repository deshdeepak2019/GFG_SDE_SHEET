BRUTEFORCE-- O(NLOGN) AND O(M+N)

int kthElement(int arr1[], int arr2[], int n, int m, int k)
    {
     vector<int>v;
     for(int i=0;i<n;i++){
         v.push_back(arr1[i]);
     }
     for(int i=0;i<m;i++){
         v.push_back(arr2[i]);
     }
     sort(v.begin(),v.end());
     return v[k-1];
    }
    
    BETTER APRROACH-- O(N) and O(N+m)
    
    
   int kthElement(int arr1[], int arr2[], int n, int m, int k)
    {
     vector<int>v;
     int i=0,j=0;
     while(i<n and j<m){
         if(arr1[i]<arr2[j]){
             v.push_back(arr1[i]);
             i++;
         }else{
              v.push_back(arr2[j]);
              j++;
         }
     }
     while(i<n){
          v.push_back(arr1[i]);
          i++;
     }
     while(j<m){
          v.push_back(arr2[j]);
          j++;
     }
     return v[k-1];
    }



BEST APPROACH  -- O(K) AND O(1)


 int kthElement(int arr1[], int arr2[], int n, int m, int k)
    {
    int ans=0,j=0,i=0;
    while(i<n and j<m){
        if(arr1[i]<arr2[j]){
            ans++; 
            if(ans==k){
                return arr1[i];
            }
            i++;
        }else{
            ans++;
            if(ans==k){
                return arr2[j];
            }
             j++;
        }
    }
    while(i<n){
        ans++;
        if(ans==k){
            return arr1[i];
        }
        i++;
    }
    while(j<m){
        ans++;
        if(ans==k){
            return arr2[j];
        }
        j++;
    }
    }
