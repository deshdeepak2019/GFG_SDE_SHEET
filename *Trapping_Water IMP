Bruteforce   -- O(N) and (2*N)

 long long trappingWater(int arr[], int n){
       long long int sum=0;
        vector<int>v1(n),v2(n);
        v1[0]=arr[0];
        v2[n-1]=arr[n-1];
        for(int i=1;i<n;i++){
            v1[i]=max(v1[i-1],arr[i]);
        }
        for(int i=n-2;i>=0;i--){
            v2[i]=max(v2[i+1],arr[i]);
        }
       for(int i=0;i<n;i++){
           sum+=(min(v1[i],v2[i])-arr[i]);
       }
        return sum;
    }




BETTER APPROACH--   O(N) AND O(1)

long long int ans=0;
        int l=0,r=n-1,lmax=0,rmax=0;
        while(l<r){
            lmax=max(lmax,arr[l]);
            rmax=max(rmax,arr[r]);
            if(lmax<rmax){
                ans+=(lmax-arr[l]);
                l++;
            }else{
                ans+=(rmax-arr[r]);
                r--;
            }
        }
        return ans;
    }
